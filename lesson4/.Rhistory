load(diamonds)
library(ggplot2)
load(diamonds)
data("diamonds")
str(diamonds)
ggplot(data=diamonds)+geom_bar(mapping = aes(x=cut))
ggplot(data=diamonds)+geom_histogram(mapping = aes(x=cut),binwidth = 0.25)
ggplot(data=diamonds)+geom_histogram(mapping = aes(x=carat), binwidth = 0.25)
ggplot(data=diamonds)+geom_histogram(mapping = aes(x=carat), binwidth = 0.1)
ggplot(data=diamonds)+geom_histogram(mapping = aes(x=carat), binwidth = 0.5)
ggplot(data=diamonds, mapping=aes(x=carat,colours=cut))+geom_freqpoly(binwidth=0.2)
ggplot(data=diamonds, mapping=aes(x=carat,colour=cut))+geom_freqpoly(binwidth=0.2)
ggplot(data=diamonds, mapping=aes(x=log10(carat),colour=cut))+geom_freqpoly(binwidth=0.2)
ggplot(data=diamonds, mapping=aes(x=log10(carat),colour=cut))+geom_freqpoly(binwidth=0.1)
setwd("~/R/udacity scripts/lesson4")
library(ggplot2)
data("diamonds")
str(diamonds)
ggplot(aes(x=x,y=price),data=diamonds) +
geom_point(alpha=1/40,position = position_jitter(h=0.1)) +
xlim(3,quantile(diamonds$x,0.90)) +
ylim(0,quantile(diamonds$price,0.90))
with(diamonds,cor.test(x = x, y = price, method = 'pearson'))
with(diamonds,cor.test(x = y, y = price, method = 'pearson'))
with(diamonds,cor.test(x = z, y = price, method = 'pearson'))
ggplot(aes(x=depth,y=price),data=diamonds) +
geom_point(alpha=1/100) +
scale_x_continuous(breaks=seq(40,80,2))
with(diamonds,cor.test(x = depth, y = price, method = 'pearson'))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/40,position = position_jitter(h=0.1)) +
xlim(3,quantile(diamonds$x,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/40,position = position_jitter(h=0.1)) +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/20,position = position_jitter(h=0.1)) +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/20,position = 'jitter') +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/30,position = 'jitter') +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/40,position = 'jitter') +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x=carat,y=price),data=diamonds) +
geom_point(alpha=1/40,position = 'jitter') +
xlim(0,quantile(diamonds$carat,0.99)) +
ylim(0,quantile(diamonds$price,0.99))
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(x=volume,y=price),data=diamonds) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv('fraud_small.tsv',sep='\t',nrows = 500)
df <- read.csv('fraud_small.tsv',sep='\t',nrows = 5000)
library(ggplot2)
library(gridExtra)
qplot(x='',xlab = 'fraud',y=konduto_score,
data=subset(df, df$konduto_recommendation %in% c('APPROVE','DECLINE','REVIEW') & df$status == 'PAID'),
geom='boxplot') +
facet_grid(konduto_recommendation ~ is_chargeback) +
coord_cartesian(ylim=c(0,0.7))
setwd("~/R/udacity scripts/lesson4")
library(ggplot2)
data("diamonds")
str(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
with(diamonds,cor.test(price,volume))
with(subset(diamonds, volume != 0 & volume < 800,cor.test(price,volume))
with(subset(diamonds, volume != 0 & volume < 800),cor.test(price,volume))
with(subset(diamonds, volume != 0 & volume < 800),cor.test(price,volume))
ggplot(aes(x=volume,y=price),data=subset(diamonds, volume != 0 & volume < 800)) +
geom_point(alpha=1/40) +
geom_smooth(method="lm", se = FALSE)
### 12. Adjusts to scatterplot price x volume
```{r, fig.width= 8, fig.height= 4}
library(dplyr)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
View(diamondsByClarity)
library(gridExtra)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p1 <- ggplot(aes(x=color,y=mean_price),data = diamonds_mp_by_color) + geom_bar()
p1
p1 <- ggplot(aes(x=color),data = diamonds_mp_by_color) + geom_bar(aes(y=mean_price))
p1
p1 <- ggplot(aes(color),data = diamonds_mp_by_color) + geom_bar(aes(mean_price))
p1
p1 <- ggplot(aes(color),data = diamonds_mp_by_color) + geom_bar(aes(mean_price),stat = sum)
p1 <- ggplot(aes(color),data = diamonds_mp_by_color) + geom_bar(aes(mean_price),stat = 'sum')
p1
p1 <- ggplot(aes(color),data = diamonds_mp_by_color) + geom_bar(aes(x=color,y=mean_price),stat = 'sum')
p1
p1 <- ggplot(data = diamonds_mp_by_color) + geom_bar(aes(x=color,y=mean_price),stat = 'sum')
p1
p1 <- ggplot(data = diamonds_mp_by_color) + geom_bar(aes(x=color,y=mean_price),stat = 'max')
p1 <- ggplot(data = diamonds_mp_by_clarity) + geom_bar(aes(x=clarity,y=mean_price),stat = 'sum')
p2 <- ggplot(data = diamonds_mp_by_color) + geom_bar(aes(x=color,y=mean_price),stat = 'sum')
grid.arrange(p1,p2)
